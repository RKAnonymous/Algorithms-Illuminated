1. Karatsuba Algorithm

Input: two n-digit positive integers x and y.
Output: the product x · y.
Assumption: n is a power of 2.
    if n = 1 then
        // base case
        compute x · y in one step and return the result
    else
        // recursive case
        a, b := first and second halves of x
        c, d := first and second halves of y
        compute p := a + b and q := c + d using grade-school addition
        recursively compute ac := a · c, bd := b · d, and pq := p · q
        compute adbc := pq ac bd using grade-school addition
        compute 10 n · ac + 10 n/2 · adbc + bd using grade-school addition and return the result


2. MergeSort Algorithm

Input: array A of n distinct integers.
Output: array with the same integers, sorted from smallest to largest.

    base case: if array length smaller than 2 return array

    C := recursively sort first half of A
    D := recursively sort second half of A
    return Merge (C,D)

    2.1 Merge Algorithm

    Input: sorted arrays C and D (length n/2 each).
    Output: sorted array B (length n).
    Simplifying assumption: n is even.

        Initialize i and j index variables for C and D arrays, result array
        while B size is smaller than the sum of C and B sizes
            if item of C array at i is lower than the item of D at j
                append C[i] item to result
                increment i by 1
            else:
                append D[j] item to result
                increment j by 1

            if the end either array is reached,
            add the remaining elements of the other array to the result

        return the result

    Useful resources: https://realpython.com/sorting-algorithms-python/#the-merge-sort-algorithm-in-python


3. Brute Force Searching Algorithm (Counting for Inversions of array)

Input: array A of n distinct integers.
Output: the number of inversions of A.

    Initialize variable to count the occurring inversion

    Loop over from i=0 to length(A)-1
        Loop over from j=i+1 to length(A)
            if A[i] > A[j]
                increment number of inversions by 1

    return number of inversions


4. Merge Sort and Count Inversions Algorithm

Input: array A of n distinct integers.
Output: sorted array B with the same integers, and the number of inversions of A.

    if n < 2
        return A, 0
    else
        C: left_inversions = SortCountInv(first half of A)
        D: right_inversions = SortCountInv(second half of A)
        B: split_inversions = MergeCountSplitInv(C, D)

        return B, left_inversions + right_inversions + split_inversions

    4.1 Merge Count Split Inversion (Using Merge Algorithm above)

        Input: sorted arrays C and D (length n/2 each).
        Output: sorted array B (length n), number of inversions.
        Simplifying assumption: n is even.

            Initialize i and j index variables for C and D arrays, result array, inversionCount
            while B size is smaller than the sum of C and D arrays' sizes
                if item of C array at i is lower than the item of D at j
                    append C[i] item to result
                    increment i by 1
                else:
                    append D[j] item to result
                    increment j by 1
                    increment inversionCount by (n/2-i+1)

                if the end either array is reached,
                add the remaining elements of the other array to the result

            return the result


5. Quick Sorting Algorithm

Input: array A of n distinct integers.
Post condition: elements of A are sorted from smallest to largest.
    if n <= 1 then
        return                          // base case-already sorted

    choose a pivot element p            // to-be-implemented
    partition A around p                // to-be-implemented
    recursively sort first part of A
    recursively sort second part of A


    5.1 Partition Algorithm

    Input: array A of n distinct integers, left and right endpoints l, r -> {1, 2, . . . , n} with l <= r.
    Post condition: elements of the subarray  A[l], A[l + 1], . . . , A[r] are partitioned around A[l].
    Output: final position of pivot element.
        p := A[l]
        i := l + 1
        for j := l + 1 to r do
            if A[j] < p then
                swap A[j] and A[i]           // if A[j] > p do nothing
                i := i + 1                   // restores invariant
            swap A[l] and A[i - 1]             // place pivot correctly
        return i-1                       // report final pivot position


6. RSelect Algorithm

Input: array A of n 1 distinct numbers, and an integer i 2 {1, 2, . . . , n}.
Output: the ith order statistic of A.
    if n = 1 then                                           // base case
        return A[1]

    choose pivot element p uniformly at random from A
    partition A around p

    j := p’s position in partitioned array
    if j = i then                                           // you got lucky!
        return p
    else if j > i then
        return RSelect(first part of A, i)
    else                                                    // j < i
        return RSelect(second part of A, i j)